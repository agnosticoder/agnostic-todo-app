{"version":3,"sources":["components/Todo.js","components/TodoForm.js","components/App.js","serviceWorker.js","index.js"],"names":["Todo","state","disabled","textInput","React","createRef","enableInput","_this","setState","prevState","current","focus","keyPressed","e","key","blur","moveCursorToEnd","temp_value","target","value","handleBlur","_this2","this","react_default","a","createElement","className","ref","onKeyPress","onFocus","onBlur","type","props","note","onChange","handleEditNote","index_es","onClick","icon","faEdit","handleDeleteNote","notePassed","faTrash","Component","TodoForm","handleInputChange","onSubmit","preventDefault","placeholder","name","AgnosticTodoApp","notes","componentWillMount","JSON","parse","localStorage","getItem","_unused","componentDidUpdate","prevProp","length","setItem","stringify","handleAddNote","concat","_ref","persist","index","indexOf","_ref2","window","confirm","filter","components_TodoForm","map","components_Todo","Boolean","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8bbb0ee3.chunk.js","sourcesContent":["import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEdit, faTrash } from '@fortawesome/free-solid-svg-icons';\n\nclass Todo extends React.Component {\n    state = {\n        disabled: true\n    }\n\n    textInput = React.createRef();\n\n    enableInput = () => {\n        this.setState((prevState)=> {\n            return{\n                disabled: !prevState.disabled\n            }\n        },() => {\n            this.textInput.current.focus();\n        });\n    }\n\n    keyPressed = (e) => {\n        if(e.key === 'Enter'){\n            this.enableInput();\n            this.textInput.current.blur();\n        }\n    }\n\n    moveCursorToEnd = (e) => {\n        let temp_value = e.target.value;\n        e.target.value = '';\n        e.target.value = temp_value;\n    }\n\n    handleBlur = () => {\n        this.setState(() => {\n            return{\n                disabled: true\n            }\n        })\n    }\n\n    render() {\n        return (\n            <div className='todo'>\n                <input \n                className='todo__input'\n                ref={this.textInput}\n                disabled={this.state.disabled} \n                onKeyPress={this.keyPressed}\n                onFocus={this.moveCursorToEnd}\n                onBlur={this.handleBlur}\n                type='text' \n                value={this.props.note.note} \n                onChange={(e) => { this.props.handleEditNote(e, { note: this.props.note }) }} \n                />\n                <div className='todo__icons'>\n                    <div className='todo__icons-edit'>\n                        <FontAwesomeIcon onClick={this.enableInput} icon={faEdit} />\n                    </div>\n                    <div className='todo__icons-delete'>\n                        <FontAwesomeIcon onClick={() => this.props.handleDeleteNote({ notePassed: this.props.note })} icon={faTrash} />\n                    </div>\n                </div>\n                \n            </div>\n        );\n    }\n}\n\nexport default Todo;","import React from 'react';\n\n\n\nclass TodoForm extends React.Component {\n\n    state = {\n        note: ''\n    };\n\n    handleInputChange = (e) => {\n        let note = e.target.value;\n        this.setState(() => {\n            return {\n                note: note\n            }\n        });\n    }\n\n    onSubmit = (e) => {\n        e.preventDefault();\n        let note = e.target[0].value;\n        if (note) {\n            this.props.onSubmit(note);\n            this.setState(() => {\n                return {\n                    note: ''\n                }\n            })\n        }\n\n    }\n\n    render() {\n        return (\n            <div className='container'>\n                <form className='form' onSubmit={this.onSubmit}>\n                    <input className='form__input' type='text' placeholder='Type your todo here...' name='note' value={this.state.note} onChange={this.handleInputChange} />\n                    <div>\n                        <button className='form__button'>Add Todo</button>\n                    </div>\n                </form>\n            </div>\n        );\n    }\n};\n\nexport default TodoForm;\n\n","import React from 'react';\nimport Todo from './Todo';\nimport TodoForm from './TodoForm';\n\nclass AgnosticTodoApp extends React.Component {\n\n  state = {\n    notes: []\n  }\n\n  //This will load the state stored in local storage first time you open the app.\n  componentWillMount = () => {\n    try {\n      let notes = JSON.parse(localStorage.getItem('notes'));\n      if (notes) {\n        this.setState((state) => {\n          return {\n            notes: notes,\n          }\n        });\n      }\n    } catch{ }\n  }\n\n  //This will update the local storage each time state changes during the app runs\n  componentDidUpdate = (prevProp, prevState) => {\n    if (this.state.notes.length !== prevState.notes.length) {\n      localStorage.setItem('notes', JSON.stringify(this.state.notes));\n    }\n  }\n\n\n  handleAddNote = (note) => {\n    if (note) {\n      this.setState((state) => {\n        return {\n          notes: state.notes.concat({ note })\n        }\n      });\n    };\n  }\n\n  handleEditNote = (e, {note}) => {\n    e.persist();\n    this.setState((prevState) => {\n      let notes = prevState.notes;\n      let index = notes.indexOf(note);\n      notes[index].note = e.target.value;\n      return {\n        notes\n      }\n    },() => {\n      //Call back function when state changes\n      localStorage.setItem('notes', JSON.stringify(this.state.notes));\n    })\n  }\n\n  handleDeleteNote = ({notePassed}) => {\n    let confirm = window.confirm('Are you sure to want to delete this Todo?');\n\n    if(confirm){\n      this.setState((prevState) => {\n        return{\n          notes: prevState.notes.filter((note) => {\n            return note.note !== notePassed.note;\n          })\n        }\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className='todo-app'>\n      <div className='header'>\n      <div className='container'>\n        <h1 className='header__title'>Agnostic Todo App</h1>\n      </div>\n      </div>\n        <TodoForm onSubmit={(note) => this.handleAddNote(note)} />\n        <div className='container'>\n        <div className='todo-container'>\n          {this.state.notes.map((note, index) => {\n            return <Todo key={index} note={note} handleEditNote={this.handleEditNote} handleDeleteNote={this.handleDeleteNote} />\n          })}\n        </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default AgnosticTodoApp;\n\n\n/*\nC - Create -- DONE\nR - Read\nU - Update\nD - Delete\n*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport AgnosticTodoApp from './components/App';\nimport 'normalize.css';\n// import 'bootstrap/dist/css/bootstrap.css';\nimport './styles/styles.scss';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<AgnosticTodoApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}